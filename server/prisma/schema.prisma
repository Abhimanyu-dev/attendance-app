// bunx prisma init --datasource-provider postgresql for seting up the prisma schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url = "postgresql://appadmin:ps1@localhost:5432/appdata?schema=public"
}

// TODO: we can directly mark the attendance from the ui, it will check if the user is in the radius of th loaction

// TODO: I feel no need of the Location model
model Location {
  id           Int    @id @default(autoincrement())
  locationName String
  xCoordinate  Float
  yCoordinate  Float
  event        Event?
}

model Attendance {
  id         Int      @id @default(autoincrement())
  locationId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  time       DateTime @default(now())
}

// show in the profile section
model Profile {
  id         Int    @id @default(autoincrement())
  employeeId Int    @unique
  name       String
  position   String
  password   String
  user       User   @relation(fields: [userId], references: [id])
  userId     Int    @unique
}

// TODO: we can shift the role to the profile model
model User {
  id         Int          @id @default(autoincrement())
  profile    Profile?
  role       Role         @default(USER)
  Attendance Attendance[]
  events     Event[]      @relation("UserEvents")
}

// TODO: To fix dublicate event cretion, need somthing to stop it
model Event {
  id               Int       @id @default(autoincrement())
  title            String
  description      String?
  date             DateTime  @default(now())
  location         Location? @relation(fields: [locationId], references: [id])
  locationId       Int?      @unique
  assignedOfficers User[]    @relation("UserEvents")
  // TODO: it's a one to many one relation int parentEvent, need one i think
  subEvents        Event[]   @relation("subEvents")
  parentEvent      Event?     @relation("subEvents", references: [id], fields: [parentEventId])
  parentEventId    Int?
}

enum Role {
  ADMIN // 2
  USER // 3
  OBSERVER // 1
}
